/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author ionildo
 */
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.*;

public class NewJFrame extends javax.swing.JFrame {
     BufferedImage imagem1;
     BufferedImage imagem2;
     int flag=0;
   
    public NewJFrame() {
        initComponents();
        panelSlider.setVisible(false);
        sliderMain.setValue(10);
        setExtendedState(JFrame.MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        panelSlider = new javax.swing.JPanel();
        sliderMain = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 255, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jScrollPane1.setViewportView(jLabel1);

        jScrollPane2.setViewportView(jLabel2);

        sliderMain.setMaximum(10);
        sliderMain.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMainStateChanged(evt);
                transparenciaSliderChanged(evt);
                correcaoGammaSliderChanged(evt);
                sobreporImagensSliderChanged(evt);
            }
        });

        javax.swing.GroupLayout panelSliderLayout = new javax.swing.GroupLayout(panelSlider);
        panelSlider.setLayout(panelSliderLayout);
        panelSliderLayout.setHorizontalGroup(
            panelSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSliderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sliderMain, javax.swing.GroupLayout.DEFAULT_SIZE, 1015, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelSliderLayout.setVerticalGroup(
            panelSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSliderLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sliderMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("Arquivo");

        jMenuItem1.setLabel("Abrir...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setLabel("Salvar...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setLabel("Sair");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Imagem");

        jMenuItem4.setLabel("Negativo");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Escala de Cinza");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Transparência Com a Cor Preta");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setLabel("Sobrepor Imagens");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenu3.setText("Arquivo PNM");

        jMenuItem8.setText("Abrir Arquivo");
        jMenu3.add(jMenuItem8);

        jMenuItem9.setText("Exportar");
        jMenu3.add(jMenuItem9);

        jMenu2.add(jMenu3);

        jMenuItem10.setText("Segmentar Cor");
        jMenu2.add(jMenuItem10);

        jMenuItem11.setText("Correção Gamma");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addComponent(panelSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        //panelSlider.setVisible(false);
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("BMP, JPG, PNG & GIF Images", "bmp", "jpg", "png", "gif");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Abrir Imagem");
        int op = chooser.showOpenDialog(this);
        if(op == JFileChooser.APPROVE_OPTION){  
            File arq = chooser.getSelectedFile();  
            String path = arq.toString();  
            try { 
                  //carrega nova imagem
                  imagem1 = ImageIO.read(new File(path));
                  imagem2 = ImageIO.read(new File(path));
                  System.out.println("Arquivo aberto com sucesso!");
                  ImageIcon icon = new ImageIcon(imagem1);
                  if (flag==0) {
                      
                      jLabel1.setIcon(icon);
                      //Container contentPane = getContentPane();
                      //contentPane.setLayout(new GridLayout());
                      //contentPane.add(new JScrollPane(jLabel1));
                      flag=1;
                  }
                  else jLabel1.setIcon(icon);
                  
                  
                  if (this.imagem1 != null ) {
                    //setSize(imagem1.getWidth()+25, imagem1.getHeight()+70);
                  }
                  jScrollPane1.setSize(this.getWidth(), this.getHeight());
	    }
	    catch(IOException e){
		System.out.println("Erro IO Exception! Verifique se o arquivo especificado existe e tente novamente.");
	    }
	    catch(Exception e){
		System.out.println("Erro Exception! " + e.getMessage());
	    }                   
        }  
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(1);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //panelSlider.setVisible(false);
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG Images", "jpg");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Salvar Imagem");
        int op = chooser.showSaveDialog(this);
        if(op == JFileChooser.APPROVE_OPTION){  
            File arq = chooser.getSelectedFile();  
            String path = arq.toString();  
            try {
		ImageIO.write(imagem1,"jpg",new File(path));
		System.out.println("Arquivo salvo com sucesso!");
		}
		catch(IOException e){
			System.out.println("Erro IO Exception! Verifique se o arquivo especificado existe e tente novamente.");
		}
		catch(Exception e){
			System.out.println("Erro Exception! " + e.getMessage());
		}
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        //panelSlider.setVisible(false);
        int width = imagem1.getWidth();
	int height = imagem1.getHeight();
	    for (int i = 0; i < width; i++) {
                for (int j = 0; j < height; j++) { 				
                   //int rgb = imagem1.getRGB(i, j); 	//a cor inversa é dado por 255 menos o valor de cada canal 				
                   //int r = 255 - (int)((rgb&0x00FF0000)>>>16);
		   //int g = 255 - (int)((rgb&0x0000FF00)>>>8);
		   //int b = 255 - (int) (rgb&0x000000FF);
                   Color cor = new Color(imagem1.getRGB(i, j));
                   int r = 255 - cor.getRed();
                   int g = 255 - cor.getGreen();
                   int b = 255 - cor.getBlue();
		   Color color = new Color(r, g, b);
		   imagem1.setRGB(i, j, color.getRGB());
	    }
        }
        this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);


    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
       //panelSlider.setVisible(false);
       int width = imagem1.getWidth();
       int height = imagem1.getHeight();
	    for (int i = 0; i < width; i++) {
                for (int j = 0; j < height; j++) { 				
                   Color c = new Color(imagem1.getRGB(i, j));
                   int y = (int)(0.299*c.getRed() + 0.587*c.getGreen() + 0.114*c.getBlue());
		   Color color = new Color(y, y, y);
		   imagem1.setRGB(i, j, color.getRGB());
	    }
        }
        this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        //transparencia
        jScrollPane1.setSize(this.getWidth(), this.getHeight()-150);
        panelSlider.setSize(this.getWidth(), 120);
        panelSlider.setVisible(true);
        
        sliderMain.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent t){
                transparenciaSliderChanged(t);
            }          
        });
        
        
        
        //sliderMain.setValue(0);
        //int width = imagem1.getWidth();
        //int height = imagem1.getHeight();
        /*for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) { 				
               Color c = new Color(imagem1.getRGB(i, j));
               int argb = (c.getRed()<<24)|(c.getGreen()<<16)|(c.getBlue()<<8)|255; 
               //int y = (int)(0.299*c.getRed() + 0.587*c.getGreen() + 0.114*c.getBlue());
               Color color = new Color(argb); //c.getRed(), c.getGreen(), c.getBlue(), 0);
               imagem1.setRGB(i, j, color.getRGB());
            }
        }
        this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
        */
        
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void sliderMainStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMainStateChanged
        //transparencia
        panelSlider.setVisible(true);
        //sliderMain.setValue(10);
        if (this.imagem1 == null)
            return;
        
        int width = imagem1.getWidth();
        int height = imagem1.getHeight();
        int value = sliderMain.getValue();
        double transparencia = value / 10.0;
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) { 				
               Color c = new Color(imagem2.getRGB(i, j));
                             
               int red = (int) (0*(1-transparencia) + c.getRed()* transparencia);
               int green = (int) (0*(1-transparencia) + c.getGreen()* transparencia);
               int blue = (int) (0*(1-transparencia) + c.getBlue()* transparencia);
               
               Color color = new Color(red, green, blue);
               imagem1.setRGB(i, j, color.getRGB());
            }
        }
        this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
        
    }//GEN-LAST:event_sliderMainStateChanged

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        //sobrepor imagens
        jScrollPane1.setSize(this.getWidth(), this.getHeight()-150);
        panelSlider.setSize(this.getWidth(), 120);
        panelSlider.setVisible(true);
        sliderMain.setMinimum(0);
        sliderMain.setMaximum(10);
        sliderMain.setValue(0);
        
        sliderMain.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent t){
                sobreporImagensSliderChanged(t);
            }          
        }); 
        
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("BMP, JPG, PNG & GIF Images", "bmp", "jpg", "png", "gif");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Abrir Imagem");
        int op = chooser.showOpenDialog(this);
        if(op == JFileChooser.APPROVE_OPTION){  
            File arq = chooser.getSelectedFile();  
            String path = arq.toString();  
            try { 
                  //carrega nova imagem
                  imagem2 = ImageIO.read(new File(path));
                  System.out.println("Arquivo aberto com sucesso!");
                  ImageIcon icon = new ImageIcon(imagem2);
                  if (flag==0) {
                      
                      jLabel2.setIcon(icon);
                      //Container contentPane = getContentPane();
                      //contentPane.setLayout(new GridLayout());
                      //contentPane.add(new JScrollPane(jLabel1));
                      flag=1;
                  }
                  else jLabel2.setIcon(icon);
                 
                  if (this.imagem2 != null ) {
                    //setSize(imagem1.getWidth()+25, imagem1.getHeight()+70);
                  }
                  jScrollPane2.setSize(this.getWidth() / 2, this.getHeight() / 2);
                  jScrollPane1.setSize(this.getWidth() / 2, this.getHeight() / 2);
                  
                  jScrollPane2.setLocation((this.getWidth() / 2) + 10, 0);

	    }
	    catch(IOException e){
		System.out.println("Erro IO Exception! Verifique se o arquivo especificado existe e tente novamente.");
	    }
	    catch(Exception e){
		System.out.println("Erro Exception! " + e.getMessage());
	    }                   
        }  
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        //transparencia
        jScrollPane1.setSize(this.getWidth(), this.getHeight()-150);
        panelSlider.setSize(this.getWidth(), 120);
        panelSlider.setVisible(true);
        sliderMain.setMinimum(0);
        sliderMain.setMaximum(25);
        sliderMain.setValue(10);
        
        sliderMain.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent t){
                correcaoGammaSliderChanged(t);
            }          
        });                   
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void transparenciaSliderChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparenciaSliderChanged
        //correcao gamma
        panelSlider.setVisible(true);
        //sliderMain.setValue(10);
        if (this.imagem1 == null)
            return;
        
        int width = imagem1.getWidth();
        int height = imagem1.getHeight();
        int value = sliderMain.getValue();
        double transparencia = value / 10.0;
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) { 				
               Color c = new Color(imagem2.getRGB(i, j));
                             
               int red = (int) (0*(1-transparencia) + c.getRed()* transparencia);
               int green = (int) (0*(1-transparencia) + c.getGreen()* transparencia);
               int blue = (int) (0*(1-transparencia) + c.getBlue()* transparencia);
               
               Color color = new Color(red, green, blue);
               imagem1.setRGB(i, j, color.getRGB());
            }
        }
        this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
    }//GEN-LAST:event_transparenciaSliderChanged

    private void correcaoGammaSliderChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_correcaoGammaSliderChanged
        panelSlider.setVisible(true);
        //sliderMain.setValue(10);
        if (this.imagem1 == null)
            return;
        
        int width = imagem1.getWidth();
        int height = imagem1.getHeight();
        
        double valor_gamma = (double) sliderMain.getValue() / 10;
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) { 				
               Color c = new Color(imagem2.getRGB(i, j));
                             
               int red = this.correcaoGamma(255, c.getRed(), valor_gamma);
               int green = this.correcaoGamma(255, c.getGreen(), valor_gamma);
               int blue = this.correcaoGamma(255, c.getBlue(), valor_gamma);
               
               Color color = new Color(red, green, blue);
               imagem1.setRGB(i, j, color.getRGB());
            }
        }
        this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
    }//GEN-LAST:event_correcaoGammaSliderChanged

    private void sobreporImagensSliderChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sobreporImagensSliderChanged
        //sobrepor imagens
        panelSlider.setVisible(true);
        //sliderMain.setValue(10);
        if (this.imagem1 == null)
            return;
        
        int width = imagem1.getWidth();
        int height = imagem1.getHeight();
        int value = sliderMain.getValue();
        double transparencia = value / 10;
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) { 				
               Color c1 = new Color(imagem1.getRGB(i, j));
               Color c2 = new Color(imagem2.getRGB(i, j));
               
               int red = (int) (c1.getRed() *(1-transparencia) + c2.getRed()* transparencia);
               int green = (int) (c1.getGreen(  )*(1-transparencia) + c2.getGreen()* transparencia);
               int blue = (int) (c1.getBlue()*(1-transparencia) + c2.getBlue()* transparencia);
               
               Color color = new Color(red, green, blue);
               imagem1.setRGB(i, j, color.getRGB());
            }
        }
        this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
    }//GEN-LAST:event_sobreporImagensSliderChanged
    
    public int correcaoGamma(double c, int original, double gamma) {
        double r = original / 255.0; // Normaliza para [0, 1]
        double s = c * Math.pow(r, gamma); // Aplica a transformação
        return (int) Math.round(Math.min(255, Math.max(0, s))); // Garante o intervalo [0, 255]
    }    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelSlider;
    private javax.swing.JSlider sliderMain;
    // End of variables declaration//GEN-END:variables
}
