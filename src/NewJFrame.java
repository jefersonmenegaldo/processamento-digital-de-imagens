/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author ionildo
 */
import Utils.frmRaio;
import java.io.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.util.Collections;
import java.util.Random;
import javax.swing.filechooser.*;
import java.awt.Color;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;


public class NewJFrame extends javax.swing.JFrame {
     BufferedImage imagem1;
     int flag=0;
   
    public NewJFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("Arquivo");

        jMenuItem1.setLabel("Abrir...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setLabel("Salvar...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setLabel("Sair");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Imagem");

        jMenuItem6.setText("Adicionar Sal e Pimenta");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenu3.setText("Filtros");

        jMenuItem9.setText("Filtro da MÃ©dia");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuItem10.setText("Filtro da Mediana");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenu2.add(jMenu3);

        jMenuItem7.setText("Detectar Bordas (Sobel)");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Determinar Valor das Moedas");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 400, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 279, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("BMP, JPG, PNG & GIF Images", "bmp", "jpg", "png", "gif", "jpeg");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Abrir Imagem");
        int op = chooser.showOpenDialog(this);
        if(op == JFileChooser.APPROVE_OPTION){  
            File arq = chooser.getSelectedFile();  
            String path = arq.toString();  
            try { 
                  //carrega nova imagem
                  imagem1 = ImageIO.read(new File(path));
                  System.out.println("Arquivo aberto com sucesso!");
                  ImageIcon icon = new ImageIcon(imagem1);
                  if (flag==0) {
                      jLabel1.setIcon(icon);
                      Container contentPane = getContentPane();
                      contentPane.setLayout(new GridLayout());
                      contentPane.add(new JScrollPane(jLabel1));
                      flag=1;
                  }
                  else jLabel1.setIcon(icon);
                  //setSize(imagem1.getWidth()+25, imagem1.getHeight()+70);
	    }
	    catch(IOException e){
		System.out.println("Erro IO Exception! Verifique se o arquivo especificado existe e tente novamente.");
	    }
	    catch(Exception e){
		System.out.println("Erro Exception! " + e.getMessage());
	    }                   
        }  
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(1);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG Images", "jpg");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Salvar Imagem");
        int op = chooser.showSaveDialog(this);
        if(op == JFileChooser.APPROVE_OPTION){  
            File arq = chooser.getSelectedFile();  
            String path = arq.toString();  
            try {
		ImageIO.write(imagem1,"jpg",new File(path));
		System.out.println("Arquivo salvo com sucesso!");
		}
		catch(IOException e){
			System.out.println("Erro IO Exception! Verifique se o arquivo especificado existe e tente novamente.");
		}
		catch(Exception e){
			System.out.println("Erro Exception! " + e.getMessage());
		}
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    public int GetValorCinza(int x, int y){
        Color cor = new Color(imagem1.getRGB(x, y));
        return cor.getRed();
    }

    public int GetMediaVizinhosCinza(int x, int y, int raio, BufferedImage imagem) {
        int width = imagem.getWidth();
        int height = imagem.getHeight();
        int soma = 0;

        int count = 0;
        for (int i = -raio; i <= raio; i++) {
            for (int j = -raio; j <= raio; j++) {
                int x_vizinho = x + i;
                int y_vizinho = y + j;

                if (x_vizinho >= 0 && x_vizinho < width && y_vizinho >= 0 && y_vizinho < height) {
                    soma += GetValorCinza(x_vizinho, y_vizinho); 
                    count++;
                }
            }
        }
        return soma / count;
    }
    
    public ArrayList<Integer> GetMedianaVizinhosCinza(int x, int y, int raio, BufferedImage imagem, ArrayList<Integer> listaValores) {
        int largura = imagem.getWidth();
        int altura = imagem.getHeight();
        for (int i = -raio; i <= raio; i++) {
            for (int j = -raio; j <= raio; j++) {
                int x_vizinho = x + i;
                int y_vizinho = y + j;

                if (x_vizinho >= 0 && x_vizinho < largura && y_vizinho >= 0 && y_vizinho < altura) {
                    listaValores.add(GetValorCinza(x_vizinho, y_vizinho)); 
                }
            }
        }
        return listaValores;
    }
    
    public int[][] ConverterBufferedImageToMatriz(BufferedImage imagem){
        int width = imagem.getWidth(); 
        int height = imagem.getHeight(); 
        int[][] matriz = new int[height][width];
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                Color cor = new Color(imagem.getRGB(x, y));
                int media = (cor.getRed() + cor.getGreen() + cor.getBlue()) / 3;
                matriz[y][x] = (media < 128) ? 1 : 0;
            }
        }
        return matriz;
    }
    
    public int[] contaQtdMoedas(List<Integer> areasDetectadas) {
        int[] moedas = new int[5];
        for (int area : areasDetectadas) {
            
            if (area > 60000 && area < 70000) {
                moedas[1]++;
                continue;
            }
            if (area > 50000 && area < 60000) {
                moedas[2]++;
                continue;
            }
            if (area > 40000 && area < 50000) {
                moedas[0]++;
            }
            if (area > 60000 && area < 100000) {
                moedas[3]++;
            }
        }
        return moedas;
    }
    
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // sal e pimenta
        int width = imagem1.getWidth();
	int height = imagem1.getHeight();
        int qtdPixelsComRuido = (int) ((width * height) * 0.05);
        Random random = new Random();
        
        for (int i = 0; i < qtdPixelsComRuido; i++) {
            int x = random.nextInt(width);
            int y = random.nextInt(height);
            int tomDeCinza = (GetValorCinza(x, y) > 127) ? 255: 0;

            Color color = new Color(tomDeCinza, tomDeCinza, tomDeCinza);
            imagem1.setRGB(x, y, color.getRGB());            
        }
        
        this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        //media
        int width = imagem1.getWidth();
        int height = imagem1.getHeight();
        
        try {
            frmRaio frmRaio = new frmRaio(null, true);
            frmRaio.setVisible(true);

            if (frmRaio.MODAL_RESULT != JOptionPane.OK_OPTION)
                return;

            int raio = frmRaio.getRaio();
            int tamanhoBorda = raio;
            for (int i = tamanhoBorda; i < width -tamanhoBorda; i++) {
                for (int j = tamanhoBorda; j < height -tamanhoBorda; j++) { 				
                    int mediaValoresCinza = GetMediaVizinhosCinza(i, j, raio, imagem1);

                    if (mediaValoresCinza < 0 || mediaValoresCinza > 255) {
                      continue;  
                    }
                    Color color = new Color(mediaValoresCinza, mediaValoresCinza, mediaValoresCinza);
                    imagem1.setRGB(i, j, color.getRGB());
                }
            }
            this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
        } catch(Exception e) {
            System.out.println( String.format("Erro Ao Aplicar Filtro: %S", e.getMessage()));
        }  
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // mediana
        int width = imagem1.getWidth();
        int height = imagem1.getHeight();
                
        try {
            frmRaio frmRaio = new frmRaio(null, true);
            frmRaio.setVisible(true);

            if (frmRaio.MODAL_RESULT != JOptionPane.OK_OPTION)
                return;

            int raio = frmRaio.getRaio();
            int tamanhoBorda = raio;
            for (int i = tamanhoBorda; i < width -tamanhoBorda; i++) {
                for (int j = tamanhoBorda; j < height -tamanhoBorda; j++) { 				
                    ArrayList<Integer> valores = new ArrayList<>();    
                    valores = GetMedianaVizinhosCinza(i, j, raio, imagem1, valores);
                    Collections.sort(valores);
                    
                    int meioDoVetor = valores.size() / 2;
                    int medianaValoresCinza;
                    medianaValoresCinza = valores.get(meioDoVetor);
                                     
                    Color color = new Color(medianaValoresCinza, medianaValoresCinza, medianaValoresCinza);
                    imagem1.setRGB(i, j, color.getRGB());
                    valores.clear();
                }
            }
            this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
        } catch(Exception e) {
            System.out.println( String.format("Erro Ao Aplicar Filtro: %S", e.getMessage()));
        }  
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // contar moedas
        int width = imagem1.getWidth();
        int height = imagem1.getHeight();

        // Converte imagem para binÃ¡ria
        BufferedImage imagemData = converterParaBinario(this.imagem1);

        // PrÃ©-processamento morfolÃ³gico
        for (int i = 0; i < 4; i++) 
            imagemData = DilatarImagem(imagemData);
        
        for (int i = 0; i < 4; i++) 
            imagemData = ErodirImagem(imagemData);

        // 3. Converte imagem binÃ¡ria para matriz 0 (fundo) e 1 (moeda)
        int imagemMatriz[][] = ConverterBufferedImageToMatriz(imagemData);

        // 4. mede Ã¡rea
        List<Integer> areasDetectadas = new ArrayList<>();
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                if (imagemMatriz[i][j] == 1) {
                    int area = contaAreaMoedas(imagemMatriz, j, i);
                    if (area > 500) {
                        areasDetectadas.add(area);
                    }
                }
            }
        }

        // 5. Classifica moedas por tamanho aproximado
        int[] moedas = contaQtdMoedas(areasDetectadas); 
        
        double total = (moedas[0] * 10) + (moedas[1] *25) + (moedas[2] * 50) + (moedas[3] * 100);
        total = total / 100;
        
        // 6. Exibe resultados
        JOptionPane.showMessageDialog(this,
            String.format(
                "Total de moedas: %s \n" +
                "10 centavos: %s \n" +
                "25 centavos: %s \n" +
                "50 centavos: %s \n" +
                "1 Real: %s \n" +
                "Total: R$ %s  \n",
                areasDetectadas.size(), moedas[0], moedas[1], moedas[2], moedas[3], total
            )
        );

        this.imagem1 = imagemData;
        ImageIcon icon = new ImageIcon(this.imagem1);
        jLabel1.setIcon(icon);
        this.imageUpdate(imagemData, ALLBITS, 0, 0, width, height);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private int contaAreaMoedas(int[][] matriz, int x, int y) {
        int altura = matriz.length;
        int largura = matriz[0].length;
        Stack<Point> pilha = new Stack<>();
        pilha.push(new Point(x, y));
        int area = 0;

        while (!pilha.isEmpty()) {
            Point posicao = pilha.pop();
            int x_pilha = posicao.x;
            int y_pilha = posicao.y;

            if (x_pilha < 0 || y_pilha < 0 || x_pilha >= largura || y_pilha >= altura)
                continue;
            
            if (matriz[y_pilha][x_pilha] != 1)
                continue;

            matriz[y_pilha][x_pilha] = -1;
            area++;

            pilha.push(new Point(x_pilha + 1, y_pilha));
            pilha.push(new Point(x_pilha - 1, y_pilha));
            pilha.push(new Point(x_pilha, y_pilha + 1));
            pilha.push(new Point(x_pilha, y_pilha - 1));
        }
        return area;
    }

    
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // Sobel
        int width = imagem1.getWidth();
        int height = imagem1.getHeight();

        BufferedImage imagemSaida = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        
        int[][] mascaraX = {
            { -1, 0, 1 },
            { -2, 0, 2 },
            { -1, 0, 1 }
        };

        int[][] mascaraY = {
            { -1, -2, -1 },
            {  0,  0,  0 },
            {  1,  2,  1 }
        };

        for (int i = 1; i < width - 1; i++) {
            for (int j = 1; j < height - 1; j++) {
                int gx = 0;
                int gy = 0;
                for (int x = -1; x <= 1; x++) {
                    for (int y = -1; y <= 1; y++) {
                        int pixel = new Color(imagem1.getRGB(i + x, j + y)).getRed(); // assume imagem em tons de cinza
                        gx += pixel * mascaraX[x + 1][y + 1];
                        gy += pixel * mascaraY[x + 1][y + 1];
                    }
                }
                int g = Math.abs(gx) + Math.abs(gy); // aproximaÃ§Ã£o de |G|
                g = Math.min(255, g); // limita ao intervalo vÃ¡lido
                Color cor = new Color(g, g, g);
                imagemSaida.setRGB(i, j, cor.getRGB());
            }
        }

        this.imagem1 = imagemSaida;
        ImageIcon icon = new ImageIcon(this.imagem1);
        jLabel1.setIcon(icon);
        this.imageUpdate(imagemSaida, ALLBITS, 0, 0, width, height);
    }
    
    public BufferedImage converterParaBinario(BufferedImage imagem) {
        int largura = imagem.getWidth();
        int altura = imagem.getHeight();

        BufferedImage binaria = new BufferedImage(largura, altura, BufferedImage.TYPE_BYTE_BINARY);

        for (int i = 0; i< altura; i++) {
            for (int j = 0; j < largura; j++) {
                Color cor = new Color(imagem.getRGB(i, j));

                int tomDeCinza = (cor.getRed() + cor.getGreen() + cor.getBlue()) / 3;

                int tomBinario = (tomDeCinza < 128) ? 0 : 255;
                Color color = new Color(tomBinario, tomBinario, tomBinario);

                binaria.setRGB(i, j, color.getRGB());
            }
        }

        return binaria;
    }
    
    public BufferedImage DilatarImagem(BufferedImage imagem) {
        int[][] elemento = {
            {0, 1, 0},
            {1, 1, 1},
            {0, 1, 0}
        };
        int width = imagem.getWidth();
        int height = imagem.getHeight();
        int eAltura = elemento.length;
        int eLargura = elemento[0].length;

        // Centro do elemento estruturante
        int cx = eLargura / 2;
        int cy = eAltura / 2;

        // Cria imagem de saÃ­da
        BufferedImage resultado = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_BINARY);

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {

                boolean hit = false;

                for (int j = 0; j < eAltura; j++) {
                    for (int i = 0; i < eLargura; i++) {
                        if (elemento[j][i] == 1) {
                            int bx = x + (i - cx);
                            int by = y + (j - cy);

                            if (bx >= 0 && bx < width && by >= 0 && by < height) {
                                Color cor = new Color(imagem.getRGB(bx, by));
                                int media = (cor.getRed() + cor.getGreen() + cor.getBlue()) / 3;

                                if (media < 128) { // pixel preto
                                    hit = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (hit) break;
                }

                int corFinal = hit ? 0 : 255; // preto se bateu, branco se nÃ£o
                Color novaCor = new Color(corFinal, corFinal, corFinal);
                resultado.setRGB(x, y, novaCor.getRGB());
            }
        }
        return resultado;
    }

    public BufferedImage ErodirImagem(BufferedImage imagem) {
        int[][] elemento = {
            {0, 1, 0},
            {1, 1, 1},
            {0, 1, 0}
        };
        int width = imagem.getWidth();
        int height = imagem.getHeight();
        int eAltura = elemento.length;
        int eLargura = elemento[0].length;

        int cx = eLargura / 2;
        int cy = eAltura / 2;

        BufferedImage resultado = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_BINARY);

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {

                boolean cabe = true;

                for (int j = 0; j < eAltura; j++) {
                    for (int i = 0; i < eLargura; i++) {
                        if (elemento[j][i] == 1) {
                            int bx = x + (i - cx);
                            int by = y + (j - cy);

                            if (bx < 0 || bx >= width || by < 0 || by >= height) {
                                cabe = false;
                                break;
                            }

                            Color cor = new Color(imagem.getRGB(bx, by));
                            int media = (cor.getRed() + cor.getGreen() + cor.getBlue()) / 3;

                            if (media >= 128) { // se for branco
                                cabe = false;
                                break;
                            }
                        }
                    }
                    if (!cabe) break;
                }

                int corFinal = cabe ? 0 : 255; // preto se couber o EE, senÃ£o branco
                Color novaCor = new Color(corFinal, corFinal, corFinal);
                resultado.setRGB(x, y, novaCor.getRGB());
            }
        }

        return resultado;
    }
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    // End of variables declaration//GEN-END:variables
}
